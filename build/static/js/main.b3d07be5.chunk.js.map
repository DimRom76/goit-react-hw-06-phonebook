{"version":3,"sources":["redux/contacts/contacts-actions.js","Components/ContactForm/ContactForm.js","Components/ContactList/ContactElement/ContactElement.js","Components/ContactList/ContactList.js","Components/Filter/Filter.js","App.js","redux/contacts/contacts-reducer.js","redux/store.js","index.js","Components/ContactList/ContactElement/ContactElement.module.css","Components/ContactForm/ContactForm.module.css"],"names":["actions","addContacts","createAction","values","payload","id","uuidv4","name","number","deleteContacts","changeFilter","connect","contacts","items","dispatch","onSubmit","value","contactsAction","schema","Yup","shape","min","max","required","length","initialValues","validationSchema","setSubmitting","resetForm","find","toLowerCase","toast","warn","isSubmitting","errors","touched","className","s","form","form_field","htmlFor","form_label","placeholder","error_message","type","pattern","disabled","ContactElement","onDeleteContact","element","onClick","getVisibleContacts","allContacts","filter","normalizedFilter","el","indexOf","map","state","onChange","e","target","App","createReducer","contact","contactsReducer","combineReducers","store","configureStore","reducer","devTools","process","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.b3d07be5.chunk.js","sourcesContent":["import { v4 as uuidv4 } from 'uuid';\nimport { createAction } from '@reduxjs/toolkit';\n\nconst addContacts = createAction('contacts/add', values => ({\n  payload: { id: uuidv4(), name: values.name, number: values.number },\n}));\n\nconst deleteContacts = createAction('contacts/delete');\n\nconst changeFilter = createAction('contacts/changeFilter');\n\nconst actions = { addContacts, deleteContacts, changeFilter };\n\nexport default actions;\n","import { Formik, Field, Form } from 'formik';\nimport * as Yup from 'yup';\nimport PropTypes from 'prop-types';\nimport s from './ContactForm.module.css';\nimport { connect } from 'react-redux';\n\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nimport contactsAction from '../../redux/contacts/contacts-actions';\n\nfunction ContactForm({ onSubmit, contacts }) {\n  let schema = Yup.object().shape({\n    name: Yup.string()\n      .min(2, 'Too Short!')\n      .max(25, 'Too Long!')\n      .required('Requerid'),\n    number: Yup.string().length(9, 'Wrong length!').required('Requerid'),\n  });\n\n  return (\n    <>\n      <Formik\n        initialValues={{ name: '', number: '' }}\n        validationSchema={schema}\n        onSubmit={(values, { setSubmitting, resetForm }) => {\n          //форма в режиме отправляется, кнопка неактивная пока не отменим\n          //нужно если бросам запрос на сервер например\n          setSubmitting(false);\n\n          const findEl = contacts.find(\n            ({ name, number }) =>\n              name.toLowerCase() === values.name.toLowerCase() ||\n              number === values.number,\n          );\n\n          if (findEl) {\n            toast.warn('Введенное имя или номер уже есть в справочнике!');\n            return;\n          }\n\n          onSubmit(values);\n\n          //очищаем форму к начальным значениям\n          resetForm();\n        }}\n      >\n        {({ isSubmitting, errors, touched }) => (\n          <Form className={s.form}>\n            <div className={s.form_field}>\n              <label\n                htmlFor=\"name\n                  \"\n                className={s.form_label}\n              >\n                Name\n              </label>\n              <Field\n                className=\"form_input\"\n                name=\"name\"\n                placeholder=\"Input name...\"\n              />\n              {errors.name && touched.name ? (\n                <div className={s.error_message}>{errors.name}</div>\n              ) : null}\n            </div>\n\n            <div className={s.form_field}>\n              <label htmlFor=\"number\" className={s.form_label}>\n                Number\n              </label>\n              <Field\n                className=\"form_input\"\n                type=\"tel\"\n                name=\"number\"\n                pattern=\"[0-9]{3}-[0-9]{2}-[0-9]{2}\"\n                placeholder=\"555-55-55\"\n              />\n              {errors.number && touched.number ? (\n                <div className={s.error_message}>{errors.number}</div>\n              ) : null}\n            </div>\n\n            <button\n              type=\"submit\"\n              disabled={isSubmitting}\n              className={s.form_field}\n            >\n              Add contact\n            </button>\n          </Form>\n        )}\n      </Formik>\n      <ToastContainer />\n    </>\n  );\n}\n\nContactForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n  contacts: PropTypes.array.isRequired,\n};\n\nconst mapStateToProps = ({ contacts }) => ({\n  contacts: contacts.items,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onSubmit: value => dispatch(contactsAction.addContacts(value)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\n","import PropTypes from 'prop-types';\nimport s from './ContactElement.module.css';\n\nexport default function ContactElement({ id, name, number, onDeleteContact }) {\n  return (\n    <li>\n      <p className={s.element}>\n        {name}: {number}\n      </p>\n      <button className=\"close__button\" onClick={() => onDeleteContact(id)}>\n        X\n      </button>\n    </li>\n  );\n}\n\nContactElement.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n};\n","import { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport ContactElement from './ContactElement/ContactElement';\nimport contactsAction from '../../redux/contacts/contacts-actions';\n\nfunction ContactList({ contacts, onDeleteContact }) {\n  return (\n    <ul className=\"older\">\n      {contacts.map(el => {\n        return (\n          <ContactElement\n            key={el.id}\n            id={el.id}\n            name={el.name}\n            number={el.number}\n            onDeleteContact={onDeleteContact}\n          />\n        );\n      })}\n    </ul>\n  );\n}\n\nContactList.propTypes = {\n  contacts: PropTypes.array.isRequired,\n  onDeleteContact: PropTypes.func.isRequired,\n};\n\nconst getVisibleContacts = (allContacts, filter) => {\n  const normalizedFilter = filter.toLowerCase();\n\n  return allContacts.filter(el => {\n    const foundPos = el.name.toLowerCase().indexOf(normalizedFilter);\n    return foundPos === -1 ? false : true;\n  });\n};\n\nconst mapStateToProps = ({ contacts: { items, filter } }) => ({\n  contacts: getVisibleContacts(items, filter),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onDeleteContact: id => dispatch(contactsAction.deleteContacts(id)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\n","import PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport contactsAction from '../../redux/contacts/contacts-actions';\n\nfunction Filter({ value, onChange }) {\n  return (\n    <>\n      <h3>Find contacts by name</h3>\n      <input\n        className=\"form_input\"\n        type=\"text\"\n        name=\"filter\"\n        value={value}\n        onChange={onChange}\n      ></input>\n    </>\n  );\n}\n\nFilter.propTypes = {\n  onChange: PropTypes.func.isRequired,\n  value: PropTypes.string,\n};\n\nconst mapStateToProps = state => ({\n  value: state.contacts.filter,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onChange: e => dispatch(contactsAction.changeFilter(e.target.value)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","import './App.css';\nimport ContactForm from './Components/ContactForm';\nimport ContactList from './Components/ContactList';\nimport Filter from './Components/Filter';\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <h1>Phonebook</h1>\n      <ContactForm />\n\n      <h2>Contacts</h2>\n      <Filter />\n      <ContactList />\n    </div>\n  );\n}\n\nexport default App;\n","import { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\nimport actions from './contacts-actions';\n\nconst initialContacts = [\n  { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n  { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n  { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n  { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n];\n\nconst items = createReducer(initialContacts, {\n  [actions.addContacts]: (state, { payload }) => [...state, payload],\n  [actions.deleteContacts]: (state, { payload }) =>\n    state.filter(contact => contact.id !== payload),\n});\n\nconst filter = createReducer('', {\n  [actions.changeFilter]: (state, { payload }) => payload,\n});\n\nconst contactsReducer = combineReducers({\n  items,\n  filter,\n});\n\nexport default contactsReducer;\n","import { configureStore } from '@reduxjs/toolkit';\nimport contactsReducer from './contacts/contacts-reducer';\n\nconst store = configureStore({\n  reducer: { contacts: contactsReducer },\n  devTools: process.env.NODE_ENV !== 'production',\n});\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport './index.css';\nimport App from './App';\nimport store from './redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"element\":\"ContactElement_element__1fsXL\",\"close__button\":\"ContactElement_close__button__3ZKKe\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__2Wvkm\",\"form_field\":\"ContactForm_form_field__1iEiP\",\"form_label\":\"ContactForm_form_label__1PqV0\",\"error_message\":\"ContactForm_error_message__1X1qI\"};"],"sourceRoot":""}